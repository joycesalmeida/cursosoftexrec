<<<<<QUESTÃO>>>>>
Escolha e descreva um padrão de projetos.

<<<<<RESPOSTA>>>>>

// Curso de Formação Acelerada em Programação
// Aluna: Joyce Silva de Almeida

----Padrões de Projeto----
Builder - Também conhecido como: Construtor

O Builder é um dos padrões de projeto do tipo criacional, que permite construção de objetos complexos passo a passo, usando apenas aquelas etapas que você realmente precisa. Esse construtor é independente do processo de criação de objetos. Uma classe que é conhecida como Director, controla o processo de criação de objetos.
Assim, o padrão Builder descreve uma maneira de separar um objeto de sua construção. O mesmo método de construção pode criar uma representação diferente do objeto. Dessa forma ele separa a construção de um objeto complexo de sua representação para que o mesmo processo de construção possa criar diferentes representações. Resumindo:
* Separa a lógica da representação;
* Reutiliza a lógica para trabalhar com diferentes conjuntos de dados;

As classes, interfaces e objetos de classes UML são os seguintes:

* Builder - Esta é uma interface que é usada para definir todas as etapas para criar um produto;
* ConcreteBuilder - Esta é uma classe que implementa a interface do Builder para criar um produto complexo;
* Product - Esta é uma classe que define as partes do objeto complexo que devem ser geradas pelo padrão Builder;
* Diretor - Esta é uma classe que é usada para construir um objeto usando a interface do Builder;

“Pela forma como opera, é comum que o padrão Builder esteja associado a outros padrões criacionais. Por exemplo, usar uma Abstract Factory para determinar qual a classe ConcreteBuilder que deve ser usada pelo Director ou Singleton para garantir que haja no máximo apenas uma instância de cada ConcreteBuilder.”

-- Use o Padrão Builder quando:

* O algoritmo para criar um objeto complexo deve ser independente das partes que constroem o objeto e de como elas são montadas.
* O processo de construção necessita fornecer representações diferentes para o objeto que é construído.


-- Conseqüências do Padrão Builder:

* Permite variar a representação interna de um produto;
* Isola os códigos de construção e representação;
* Permite controle fino sobre o processo de construção.


O Builder permite variar a representação interna do produto que ele cria. Ele também esconde os detalhes de como o produto é montado. Cada Builder específico é independente de outros e do resto do programa. Isso melhora a modularidade e faz a adição de outros Builders relativamente simples. Como cada Builder constrói o produto final passo-a-passo, dependendo dos dados, o programador tem mais controle sobre o produto final construído.
